//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer ShaderToyConstants
// {
//
//   float4 iMouse;                     // Offset:    0 Size:    16 [unused]
//   float4 iChannelResolution[4];      // Offset:   16 Size:    64 [unused]
//   float4 iResolution;                // Offset:   80 Size:    16
//   float iTime;                       // Offset:   96 Size:     4
//   float iFrame;                      // Offset:  100 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ShaderToyConstants                cbuffer      NA          NA            cb5      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB5[7], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- pin.position_.x; v0.y <- pin.position_.y; v0.z <- pin.position_.z; v0.w <- pin.position_.w; 
//   v1.x <- pin.texcoord_.x; v1.y <- pin.texcoord_.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 50 "C:\Users\2230081\Desktop\-\HLSL\ShaderToyPS.hlsl"
mov r0.xy, v0.xyxx  // r0.x <- fragCoord.x; r0.y <- fragCoord.y

#line 52
nop 
mov r0.xy, r0.xyxx

#line 19
div r0.xy, r0.xyxx, cb5[5].xyxx  // r0.x <- uv.x; r0.y <- uv.y

#line 20
div r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)

#line 21
add r0.x, r0.x, l(0.250000)

#line 23
mul r0.z, cb5[6].x, l(0.800000)  // r0.z <- speed

#line 25
mov r1.xyz, l(1.000000,0,0,0)  // r1.x <- red.x; r1.y <- red.y; r1.z <- red.z

#line 26
mov r2.xyz, l(0,0,1.000000,0)  // r2.x <- blue.x; r2.y <- blue.y; r2.z <- blue.z

#line 27
mov r3.xyz, l(1.000000,0.800000,0,0)  // r3.x <- yellow.x; r3.y <- yellow.y; r3.z <- yellow.z

#line 28
mov r4.xyz, l(0.500000,0,1.000000,0)  // r4.x <- purple.x; r4.y <- purple.y; r4.z <- purple.z

#line 29
mov r5.xyz, l(1.000000,0.500000,0,0)  // r5.x <- orange.x; r5.y <- orange.y; r5.z <- orange.z

#line 32
itof r6.xyz, l(0, 0, 0, 0)  // r6.x <- col.x; r6.y <- col.y; r6.z <- col.z

#line 33
nop 
mov r0.x, r0.x
mul r0.w, r0.z, l(0.050000)
add r0.w, r0.w, r0.y
mul r0.w, r0.w, l(10.000000)
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(0.060000)
mov r1.xyz, r1.xyzx

#line 11
mul r0.w, r0.w, l(1.600000)
add r0.w, r0.w, r0.x  // r0.w <- uv.x

#line 12
mov r0.w, -r0.w
add r0.w, r0.w, l(0.500000)
mov r1.w, -r0.w
max r0.w, r0.w, r1.w
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, l(29.230770)
exp r0.w, r0.w  // r0.w <- wave

#line 13
mul r1.xyz, r1.xyzx, r0.wwww  // r1.x <- <getWave return value>.x; r1.y <- <getWave return value>.y; r1.z <- <getWave return value>.z

#line 33
add r1.xyz, r1.xyzx, r6.xyzx  // r1.x <- col.x; r1.y <- col.y; r1.z <- col.z

#line 34
nop 
mul r0.w, r0.z, l(0.025000)
add r0.w, r0.w, r0.y
mul r0.w, r0.w, l(10.000000)
sincos null, r0.w, r0.w
mul r0.w, r0.w, l(0.120000)
mov r2.xyz, r2.xyzx

#line 11
mul r0.w, r0.w, l(1.600000)
add r0.w, r0.w, r0.x  // r0.w <- uv.x

#line 12
mov r0.w, -r0.w
add r0.w, r0.w, l(0.500000)
mov r1.w, -r0.w
max r0.w, r0.w, r1.w
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, l(29.230770)
exp r0.w, r0.w  // r0.w <- wave

#line 13
mul r2.xyz, r2.xyzx, r0.wwww  // r2.x <- <getWave return value>.x; r2.y <- <getWave return value>.y; r2.z <- <getWave return value>.z

#line 34
add r1.xyz, r1.xyzx, r2.xyzx

#line 35
nop 
mul r0.w, r0.z, l(-0.007000)
add r0.w, r0.w, r0.y
mul r1.w, r0.y, l(0.200000)
sincos null, r1.w, r1.w
add r0.w, r0.w, r1.w
mul r0.w, r0.w, l(8.000000)
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(0.100000)
mov r3.xyz, r3.xyzx

#line 11
mul r0.w, r0.w, l(1.600000)
add r0.w, r0.w, r0.x  // r0.w <- uv.x

#line 12
mov r0.w, -r0.w
add r0.w, r0.w, l(0.500000)
mov r1.w, -r0.w
max r0.w, r0.w, r1.w
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, l(29.230770)
exp r0.w, r0.w  // r0.w <- wave

#line 13
mul r2.xyz, r3.xyzx, r0.wwww

#line 35
add r1.xyz, r1.xyzx, r2.xyzx

#line 36
nop 
mul r0.w, r0.z, l(0.035000)
add r0.w, r0.w, r0.y
mul r1.w, r0.y, l(0.130000)
sincos r1.w, null, r1.w
add r0.w, r0.w, r1.w
mul r0.w, r0.w, l(8.000000)
sincos null, r0.w, r0.w
mul r0.w, r0.w, l(0.050000)
mov r4.xyz, r4.xyzx

#line 11
mul r0.w, r0.w, l(1.600000)
add r0.w, r0.w, r0.x  // r0.w <- uv.x

#line 12
mov r0.w, -r0.w
add r0.w, r0.w, l(0.500000)
mov r1.w, -r0.w
max r0.w, r0.w, r1.w
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, l(29.230770)
exp r0.w, r0.w  // r0.w <- wave

#line 13
mul r2.xyz, r4.xyzx, r0.wwww

#line 36
add r1.xyz, r1.xyzx, r2.xyzx

#line 37
nop 
div r0.y, r0.y, l(2.000000)
mul r0.z, r0.z, l(-0.050000)
add r0.y, r0.z, r0.y
mul r0.y, r0.y, l(10.000000)
sincos r0.y, null, r0.y
mul r0.y, r0.y, l(0.050000)
mov r5.xyz, r5.xyzx

#line 11
mul r0.y, r0.y, l(1.600000)
add r0.x, r0.y, r0.x  // r0.x <- uv.x

#line 12
mov r0.x, -r0.x
add r0.x, r0.x, l(0.500000)
mov r0.y, -r0.x
max r0.x, r0.y, r0.x
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, l(29.230770)
exp r0.x, r0.x  // r0.x <- wave

#line 13
mul r0.xyz, r5.xyzx, r0.xxxx  // r0.x <- <getWave return value>.x; r0.y <- <getWave return value>.y; r0.z <- <getWave return value>.z

#line 37
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- col.x; r0.y <- col.y; r0.z <- col.z

#line 39
mul r0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000)

#line 42
mov r0.xyz, r0.xyzx  // r0.x <- fragColor.x; r0.y <- fragColor.y; r0.z <- fragColor.z
mov r0.w, l(1.000000)  // r0.w <- fragColor.w

#line 52
mov r0.xyzw, r0.xyzw  // r0.x <- fragColor.x; r0.y <- fragColor.y; r0.z <- fragColor.z; r0.w <- fragColor.w

#line 54
mov o0.xyzw, r0.xyzw
ret 
// Approximately 127 instruction slots used
