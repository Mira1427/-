//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBWindow
// {
//
//   struct WindowConstants
//   {
//       
//       float2 size_;                  // Offset:    0
//
//   } window_;                         // Offset:    0 Size:     8
//
// }
//
// cbuffer CBObject2D
// {
//
//   struct ObjectConstants2D
//   {
//       
//       float2 position_;              // Offset:    0
//       float2 size_;                  // Offset:    8
//       float4 color_;                 // Offset:   16
//       float2 center_;                // Offset:   32
//       float2 scale_;                 // Offset:   40
//       float2 texPos_;                // Offset:   48
//       float2 texSize_;               // Offset:   56
//       float rotation_;               // Offset:   64
//
//   } object_;                         // Offset:    0 Size:    68
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBObject2D                        cbuffer      NA          NA            cb0      1 
// CBWindow                          cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_input v0.xy
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- vin.position_.x; v0.y <- vin.position_.y; v0.z <- vin.position_.z; 
//   v1.x <- vin.texcoord_.x; v1.y <- vin.texcoord_.y; 
//   o2.x <- <main return value>.texcoord_.x; o2.y <- <main return value>.texcoord_.y; 
//   o1.x <- <main return value>.color_.x; o1.y <- <main return value>.color_.y; o1.z <- <main return value>.color_.z; o1.w <- <main return value>.color_.w; 
//   o0.x <- <main return value>.position_.x; o0.y <- <main return value>.position_.y; o0.z <- <main return value>.position_.z; o0.w <- <main return value>.position_.w
//
#line 17 "D:\2年次科目\チE"
nop 

#line 15 "D:\2年次科目\チーム制作2年\第1回\-\HLSL\Common.hlsli"
mul r0.x, cb0[4].x, l(0.017453)  // r0.x <- theta

#line 16
mov r0.x, r0.x  // r0.x <- <toRadian return value>

#line 17 "D:\2年次科目\チEム制佁E年\第1回\-\HLSL\SpriteRenderer_VS.hlsl"
mov r0.x, r0.x  // r0.x <- theta

#line 18
sincos null, r0.y, r0.x  // r0.y <- cosValue

#line 19
sincos r0.x, null, r0.x  // r0.x <- sinValue

#line 21
mul r0.z, cb0[0].z, cb0[2].z
div r0.z, r0.z, cb0[0].z
mul r0.z, r0.z, cb0[2].x  // r0.z <- mx

#line 22
mul r0.w, cb0[0].w, cb0[2].w
div r0.w, r0.w, cb0[0].w
mul r0.w, r0.w, cb0[2].y  // r0.w <- my

#line 24
mul r1.xy, v0.xyxx, cb0[0].zwzz
mul r1.xy, r1.xyxx, cb0[2].zwzz  // r1.x <- position.x; r1.y <- position.y

#line 26
mov r1.z, -r0.z
add r1.x, r1.z, r1.x

#line 27
mov r1.z, -r0.w
add r1.y, r1.z, r1.y

#line 29
mov r1.x, r1.x  // r1.x <- rx

#line 30
mov r1.y, r1.y  // r1.y <- ry

#line 31
mul r1.z, r0.y, r1.x
mul r1.w, r0.x, r1.y
mov r1.w, -r1.w
add r1.z, r1.w, r1.z  // r1.z <- position.x

#line 32
mul r0.x, r0.x, r1.x
mul r0.y, r0.y, r1.y
add r0.x, r0.y, r0.x  // r0.x <- position.y

#line 34
add r0.y, r0.z, r1.z  // r0.y <- position.x

#line 35
add r0.x, r0.w, r0.x

#line 37
mul r0.z, cb0[2].x, cb0[2].z
mov r0.z, -r0.z
add r0.z, r0.z, cb0[0].x
add r0.y, r0.z, r0.y

#line 38
mul r0.z, cb0[2].y, cb0[2].w
mov r0.z, -r0.z
add r0.z, r0.z, cb0[0].y
add r0.x, r0.z, r0.x

#line 40
nop 

#line 4 "D:\2年次科目\チーム制作2年\第1回\-\HLSL\Common.hlsli"
mul r0.y, r0.y, l(2.000000)
div r0.y, r0.y, cb2[0].x
mov r0.z, l(-1.000000)
add r1.x, r0.z, r0.y  // r1.x <- x

#line 5
mul r0.x, r0.x, l(2.000000)
div r0.x, r0.x, cb2[0].y
mov r0.x, -r0.x
add r1.y, r0.x, l(1.000000)  // r1.y <- y

#line 6
mov r1.z, l(0)  // r1.z <- z

#line 8
mov r1.x, r1.x  // r1.x <- <screenToNDC return value>.x
mov r1.y, r1.y  // r1.y <- <screenToNDC return value>.y
mov r1.z, r1.z  // r1.z <- <screenToNDC return value>.z

#line 40 "D:\2年次科目\チEム制佁E年\第1回\-\HLSL\SpriteRenderer_VS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- vout.position_.x; r1.y <- vout.position_.y; r1.z <- vout.position_.z
mov r1.w, l(1.000000)  // r1.w <- vout.position_.w

#line 41
mov r0.xyzw, cb0[1].xyzw  // r0.x <- vout.color_.x; r0.y <- vout.color_.y; r0.z <- vout.color_.z; r0.w <- vout.color_.w

#line 43
mul r2.x, v1.x, cb0[0].z
add r2.x, r2.x, cb0[3].x
div r2.x, r2.x, cb0[3].z  // r2.x <- texcoord.x
mul r2.z, v1.y, cb0[0].w
add r2.z, r2.z, cb0[3].y
div r2.y, r2.z, cb0[3].w  // r2.y <- texcoord.y

#line 47
mov r2.xy, r2.xyxx  // r2.x <- vout.texcoord_.x; r2.y <- vout.texcoord_.y

#line 49
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r0.xyzw
mov o2.xy, r2.xyxx
ret 
// Approximately 64 instruction slots used
